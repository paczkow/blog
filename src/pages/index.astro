---
import { getCollection, render } from "astro:content";

import { Card } from "@/components/Card.tsx";
import IconLink from "@/components/IconLink.astro";
import Link from "@/components/Navlink.astro";
import { getSortedByDate } from "@/helpers/posts.ts";
import Layout from "@/layouts/Base.astro";
import { SITE } from "config";

const collections = await Promise.all([
  getCollection("essays"),
  getCollection("notes"),
]);

const essays = await Promise.all(
  collections[0].map(async (essay) => {
    const { remarkPluginFrontmatter } = await render(essay);

    return {
      id: essay.id,
      readTime: remarkPluginFrontmatter.minutesRead,
      type: "essay" as const,
      ...essay.data,
    };
  }),
);

const notes = collections[1].map((note) => ({
  id: note.id,
  type: "note" as const,
  ...note.data,
}));

const sortedEssays = getSortedByDate(essays);
const sortedNotes = getSortedByDate(notes);
---

<Layout title={SITE.title}>
  <div
    class="sticky col-span-full mb-8 flex flex-col gap-4 lg:top-(--nav-height) lg:col-start-1 lg:col-end-2 lg:mb-0 lg:h-[calc(100vh-242px)]"
  >
    <h2 class="text-sand-12 font-semibold">Michał Paczków</h2>
    <p class="text-sand-11">Hello. I'm just curious.</p>

    <div class="mt-16 hidden flex-col gap-4 lg:flex">
      <Link to="essays" label="Essays" className="active" />
      <Link to="notes" label="Notes" />
      <Link to="about" label="About" />
    </div>
    <div class="mt-auto hidden gap-4 lg:flex">
      <IconLink to={SITE.social.github} icon="github" />
      <IconLink to={SITE.social.linkedin} icon="linkedin" />
      <IconLink to={SITE.social.bluesky} icon="bluesky" />
    </div>
  </div>
  <div
    class="col-span-full flex flex-col gap-20 lg:col-start-2 lg:col-end-3 mr-[2px]"
  >
    <section id="essays" class="mt-[-116px] flex flex-col gap-12 pt-[116px]">
      <h2 class="text-sand-12">Essays</h2>
      <div class="group flex flex-col gap-16 md:gap-8">
        {
          sortedEssays.map((post) => {
            return (
              <Card
                id={post.id}
                variant="essay"
                date={post.date}
                topics={post.topics}
                title={post.title}
                date={post.date}
                readTime={post.readTime}
                description={post.description}
              />
            );
          })
        }
      </div>
    </section>
    <section id="notes" class="mt-[-116px] flex flex-col gap-12 pt-[116px]">
      <h2 class="text-sand-12">Notes</h2>
      <span class="text-sand-11">
        Why notes?<br /><br /> This how I cultivate my ideas, that's my <a
          class="hover:text-sand-12 underline"
          href="https://maggieappleton.com/garden-history/">digital garden</a
        >. Atomic notes, unlike essays, are not intended to be comprehensive or
        definitive. Instead, they reflect my current understanding and
        perspective on a particular topic and help me learn and develop ideas
        through iterations.
      </span>
      <div class="group flex flex-col gap-16 md:gap-8">
        {
          sortedNotes.map((post) => (
            <Card
              id={post.id}
              variant="note"
              date={post.date}
              topics={post.topics}
              title={post.title}
              status="evergreen"
            />
          ))
        }
      </div>
    </section>

    <section id="about" class="flex flex-col gap-12">
      <h2 class="text-sand-12">About</h2>
      <div class="flex flex-col gap-4">
        <p class="text-sand-11">
          I am a software engineer with over 10 years of experience in product
          development. I have worked on both front-end and back-end, starting in
          a small software house and advancing to FAANG companies. Throughout my
          career, I have worked with various technologies and methodologies
          across different programming languages, but my primary expertise lies
          in JavaScript and web applications.
        </p>
        <p class="text-sand-11">Currently at Meta.</p>
        <p class="text-sand-11">
          In my spare time, I'm deeply involved in exploring various methods and
          tools such as Personal Knowledge Management (PKM), Zettelkasten,
          Obsidian, Anki, and AI to enhance learning and productivity while
          managing information overload in our fast-changing world.
        </p>
        <p class="text-sand-11">
          If you have any questions, feel free to reach out to me on social
          media.
        </p>
      </div>
    </section>
  </div>
</Layout>

<script>
  let observerEnabled = true;

  document.addEventListener("DOMContentLoaded", () => {
    const links = Array.from(document.querySelectorAll("li.link"));
    const sections = Array.from(document.querySelectorAll("section"));

    registerScrollIntoSections(links);
    registerObserver(links, sections);
  });

  function registerScrollIntoSections(links: Element[]) {
    links.forEach((link) => {
      link.addEventListener("click", () => {
        links.forEach((l) => l.classList.remove("active"));
        link.classList.add("active");

        const sectionId = link.getAttribute("data-scroll-section");
        const section = document.getElementById(sectionId ?? "");

        if (section) {
          observerEnabled = false;
          section.scrollIntoView({ behavior: "smooth" });
          setTimeout(() => {
            observerEnabled = true;
          }, 500);
        }
      });
    });
  }

  function registerObserver(links: Element[], sections: Element[] | null) {
    if (!sections?.length) return;

    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0.5,
    };

    const observer = new IntersectionObserver((entries) => {
      if (!observerEnabled) return;

      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const activeLink = links.find(
            (link) =>
              link.getAttribute("data-scroll-section") === entry.target.id,
          );

          links.forEach((link) => link.classList.remove("active"));
          activeLink?.classList.add("active");
        }
      });
    }, observerOptions);

    sections.forEach((section) => {
      observer.observe(section);
    });
  }
</script>
